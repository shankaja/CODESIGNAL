PALINDROME TEST

boolean checkPalindrome(String inputString) {
    int middle = inputString.length() / 2;
    for(int i = 0; i< middle; i++)
    {
        if(inputString.charAt(i) == inputString.charAt(inputString.length()-(i+1)))
        {
            continue;
        }
        else
        {
            return false;
        }
    }
    return true;
}

LARGEST ADJACENT

int adjacentElementsProduct(int[] inputArray) {
    int largest = inputArray[0]*inputArray[1];
    for(int i = 0; i<inputArray.length-1;i++)
    {
        if(inputArray[i]*inputArray[i+1]> largest)
        {
            largest = inputArray[i]*inputArray[i+1];
        }
    }
    return largest;
}

//MATRIX SUM ISSUE

int matrixElementsSum(int[][] matrix) {
    int sum = 0;
    for (int y = 0 ; y<matrix.length;y++)
    {
        for (int x = 0 ; x<matrix[0].length;x++)
        {
            if(matrix[y][x] == 0 && y<matrix.length-1)
            {
                //assigning 0 to immidiately down room
                //if a room is haunted
                matrix[y+1][x] = 0;
            }
            sum +=matrix[y][x];
        }
    }
    return sum;
}


IS LUCKY
boolean isLucky(int n) {
    String ns = n+"";
    int h1 = 0;
    int h2 = 0;
    for(int i = 0; i< ns.length()/2 ; i++)
    {
        h1+= Integer.parseInt(ns.charAt(i)+"");
        h2+= Integer.parseInt(ns.charAt(i+ (ns.length()/2))+"");
    }
    return h1 == h2;
}


//SORT BY HEIGHT
int[] sortByHeight(int[] a) {
    for (int i = 0 ; i< a.length;i++){
        //in case of a tree
        if(a[i]==-1)
        {
            continue;
        }
        //in case if a person
        for (int j = i+1 ; j< a.length ; j++){
            // in case the comparing item is a tree
            if(a[j]==-1)
            {
                continue;
            }
            //need to swap two people
            if(a[i]>a[j])
            {
                //swapping logic
                int swap = a[i];
                a[i] = a[j];
                a[j] = swap;
            }
        }
    }
    return a;
}

import java.sql.Timestamp;
import java.util.Scanner;

public class main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] t = new String[n*2];
        for (int i = 0; i < n*2; i++) {
            String s = sc.next();
            t[i] = s;
            System.out.println(t[i]);
        }

        for (int i = 0; i < n*2; i++) {

        }
    }

    static void findMaxGuests(int arrl[], int exit[],
                              int n)
    {
        // Sort arrival and exit arrays
        Arrays.sort(arrl);
        Arrays.sort(exit);

        // guests_in indicates number of guests at a time
        int guests_in = 1, max_guests = 1, time = arrl[0];
        int i = 1, j = 0;

        // Similar to merge in merge sort to process
        // all events in sorted order
        while (i < n && j < n)
        {
            // If next event in sorted order is arrival,
            // increment count of guests
            if (arrl[i] <= exit[j])
            {
                guests_in++;

                // Update max_guests if needed
                if (guests_in > max_guests)
                {
                    max_guests = guests_in;
                    time = arrl[i];
                }
                i++; //increment index of arrival array
            }
            else // If event is exit, decrement count
            { // of guests.
                guests_in--;
                j++;
            }
        }

        System.out.println("Maximum Number of Guests = "+
                max_guests + " at time " + time);
    }
}


